{"version":3,"sources":["config/config.ts","redux/spotify/utils.ts","redux/spotify/actions.ts","redux/spotify/types.ts","components/MoodSlider/MoodSlider.styles.tsx","components/MoodSlider/MoodSlider.tsx","components/Player/style.ts","components/Player/index.tsx","App.style.ts","components/NoActivePlayerWarning/styles.tsx","components/NoActivePlayerWarning/index.tsx","App.tsx","redux/mood/actions.ts","redux/mood/types.ts","utils.ts","serviceWorker.ts","redux/spotify/reducer.ts","redux/mood/reducer.ts","redux/rootReducer.ts","index.tsx"],"names":["authEndpoint","clientId","redirectUri","scopes","shuffleArray","array","shuffled","i","length","j","Math","floor","random","getSongsAmount","a","axios","get","params","limit","portion","data","total","Error","fetchPortionSongDetails","offset","items","map","item","id","track","title","name","artist","artists","albumCover","album","images","url","fetchPortionSongMood","ids","audio_features","valence","energy","danceability","getColorsFromAlbumCover","Vibrant","from","getPalette","palette","Object","assign","keys","k","r","_rgb","toFixed","g","b","saveSongsToIndexedDb","allSongs","song","localforage","setItem","getNearestSong","distance","sqrt","pow","reduce","previous","current","setStatus","status","type","payload","songsLoadingStatus","RangeSlider","styled","input","MoodSlider","props","onReleased","useState","value","setValue","previousValue","setPreviousValue","gripReleased","float","Number","min","max","className","onChange","e","target","onMouseUp","onMouseDown","onTouchEnd","onTouchStart","AlbumCover","img","Title","h2","Author","Player","src","alt","gradient","keyframes","Main","color1","color2","Logo","SpotifyButton","MoodLabel","p","PlayerMoodContainer","blurred","LoadingSongs","span","WarningContainer","div","WarningTitle","h1","WarningText","WarningButton","button","NoActivePlayerWarning","onClick","connect","state","isTokenExpired","spotify","isSpotifyPlayerActive","actualSong","dispatch","bindActionCreators","tokenRefreshed","setValency","setEnergy","setDanceability","playMoodSong","getState","console","log","mood","iterate","push","nearest","utils","colors","put","uris","message","includes","response","fetchSongs","len","totalAmount","songsDetails","indexes","Array","round","slice","maxSongs","details","chunks","join","songsMood","chunk","songs","itm","find","token","setToken","useEffect","_token","localStoragedToken","localStorage","getItem","hash","window","location","substring","split","initial","parts","decodeURIComponent","access_token","defaults","headers","common","handleValencyChange","React","useCallback","handleEnergyChange","handleDanceabilityChange","Muted","DarkMuted","DarkVibrant","href","config","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","reducer","action","rootReducer","combineReducers","spotifyReducer","moodReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ba4903b7.chunk.js","sourcesContent":["export default {\r\n    authEndpoint: 'https://accounts.spotify.com/authorize',\r\n    clientId: \"056a2f6da4284c55980882095f831b4d\",\r\n    redirectUri: \"https://clever-sammet-231c42.netlify.app/\",\r\n    // redirectUri: \"http://localhost:3000/\",\r\n    scopes: [\r\n        \"user-library-read\",\r\n        \"user-modify-playback-state\",\r\n    ],\r\n};\r\n\r\nexport const maxSongs: number = 10000;","import axios, {\r\n    AxiosResponse\r\n} from 'axios';\r\n\r\nimport * as types from './types';\r\nimport Vibrant from 'node-vibrant';\r\n\r\nimport localforage from 'localforage';\r\n\r\n\r\n//tested\r\nexport const shuffleArray = (array: number[]) => {\r\n    let shuffled = [...array];\r\n\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    return shuffled;\r\n}\r\n\r\n//tested\r\nexport const getSongsAmount = async (): Promise<number> => {\r\n    try {\r\n        const portion = await axios.get('https://api.spotify.com/v1/me/tracks', {\r\n            params: {\r\n                limit: 1,\r\n            }\r\n        });\r\n\r\n        return portion.data.total;\r\n\r\n    } catch (error) {\r\n        throw new Error(error);\r\n    }\r\n}\r\n\r\n//tested\r\nexport const fetchPortionSongDetails = async (\r\n    offset: number,\r\n): Promise<types.SongInformation[]> => {\r\n    const portion = await axios.get('https://api.spotify.com/v1/me/tracks', {\r\n        params: {\r\n            offset: offset * 50,\r\n            limit: 50, // max limit according to spotify documentation\r\n        }\r\n    });\r\n\r\n    return portion.data.items.map((item: any) => ({\r\n        id: item.track.id,\r\n        title: item.track.name,\r\n        artist: item.track.artists[0].name,\r\n        albumCover: item.track.album.images[0].url,\r\n    }));\r\n};\r\n\r\n//tested\r\nexport const fetchPortionSongMood = async (\r\n    ids: string,\r\n): Promise<types.SongMood[]> => {\r\n    const portion = await axios.get('https://api.spotify.com/v1/audio-features', {\r\n        params: {\r\n            ids\r\n        }\r\n    });\r\n\r\n    return portion.data.audio_features.map((item: any) => ({\r\n        id: item.id,\r\n        valence: item.valence,\r\n        energy: item.energy,\r\n        danceability: item.danceability,\r\n    }));\r\n};\r\n\r\n//testing\r\nexport const getColorsFromAlbumCover = async (albumCover: string) => {\r\n    let palette: any = await Vibrant.from(albumCover).getPalette();\r\n\r\n    // return palette;\r\n\r\n    return Object.assign({},\r\n        ...Object.keys(palette).map(k => ({\r\n            [k]: {\r\n                r: palette[k]._rgb[0].toFixed(0),\r\n                g: palette[k]._rgb[1].toFixed(0),\r\n                b: palette[k]._rgb[2].toFixed(0),\r\n            }\r\n        }))\r\n    );\r\n}\r\n\r\nexport const saveSongsToIndexedDb = async (allSongs: types.Song[]): Promise<void> => {\r\n    //await localforage.clear(); //TODO not neccesary tbh\r\n    for (const song of allSongs) {\r\n        await localforage.setItem(song.id, song);\r\n    }\r\n};\r\n\r\n//TODO dont work\r\nexport const songsSavedToIndexedDB = async (): Promise<boolean> => {\r\n    let len = await localforage.length();\r\n    console.log(len, \" localforage.length()\");\r\n\r\n    return !!len;\r\n};\r\n\r\nexport const getNearestSong = (\r\n    allSongs: types.Song[],\r\n    valence: number,\r\n    energy: number,\r\n    danceability: number,\r\n): types.Song => {\r\n    const distance = (song: types.Song) => {\r\n        return Math.sqrt(\r\n            Math.pow((song.valence - valence), 2) +\r\n            Math.pow((song.energy - energy), 2) +\r\n            Math.pow((song.danceability - danceability), 2)\r\n        );\r\n    };\r\n\r\n    return allSongs.reduce((previous: types.Song, current: types.Song) =>\r\n        distance(previous) < distance(current) ? previous : current\r\n    );\r\n\r\n};","import { Dispatch } from \"redux\";\r\n\r\nimport * as types from './types';\r\nimport * as utils from './utils';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { maxSongs } from '../../config/config';\r\nimport localforage from \"localforage\";\r\n\r\n\r\ninterface ITokenExpirationAction {\r\n    type: typeof types.TOKEN_EXPIRED | typeof types.TOKEN_REFRESHED;\r\n}\r\n\r\nexport const tokenExpired = (): ITokenExpirationAction => ({\r\n    type: types.TOKEN_EXPIRED,\r\n});\r\n\r\nexport const tokenRefreshed = (): ITokenExpirationAction => ({\r\n    type: types.TOKEN_REFRESHED,\r\n});\r\n\r\ninterface IPlayerActive {\r\n    type: typeof types.NO_ACTIVE_PLAYER | typeof types.IS_ACTIVE_PLAYER;\r\n}\r\n\r\nexport const noActivePlayer = (): IPlayerActive => ({\r\n    type: types.NO_ACTIVE_PLAYER,\r\n});\r\n\r\nexport const isActivePlayer = (): IPlayerActive => ({\r\n    type: types.IS_ACTIVE_PLAYER,\r\n});\r\n\r\n\r\ninterface ISetActualPlayingSongAction {\r\n    type: typeof types.SET_ACTUAL_SONG;\r\n    payload: {\r\n        actualSong: types.Song & types.SongColor,\r\n    }\r\n}\r\n\r\nexport const setActualPlayingSong = (song: types.Song & types.SongColor): ISetActualPlayingSongAction => ({\r\n    type: types.SET_ACTUAL_SONG,\r\n    payload: {\r\n        actualSong: song,\r\n    }\r\n});\r\n\r\n//TODO is loading action\r\nexport const playMoodSong = () => async (\r\n    dispatch: Dispatch,\r\n    getState: () => any,\r\n): Promise<void> => {\r\n    try {\r\n        console.log(\"weszlo\");\r\n\r\n\r\n        const allSongs: types.Song[] = [];\r\n        const valence: number = getState().mood.valence\r\n        const energy: number = getState().mood.energy\r\n        const danceability: number = getState().mood.danceability\r\n\r\n        await localforage.iterate((value: types.Song) => {\r\n            allSongs.push(value);\r\n        });\r\n\r\n        if (!allSongs.length) return;\r\n\r\n        let nearest = utils.getNearestSong(allSongs, valence, energy, danceability);\r\n        let palette = await utils.getColorsFromAlbumCover(nearest.albumCover);\r\n\r\n\r\n        dispatch(setActualPlayingSong({\r\n            ...nearest,\r\n            colors: palette,\r\n        }));\r\n\r\n        await axios.put('https://api.spotify.com/v1/me/player/play', {\r\n            uris: [`spotify:track:${nearest.id}`],\r\n        });\r\n\r\n        // player is active and successfully plays song\r\n        dispatch(isActivePlayer());\r\n\r\n    } catch (error) {\r\n        dispatch(setStatus(\"waiting\"));\r\n\r\n        if (error.message.includes(\"401\") ||\r\n            (error.response && error.response.status === 401)) {\r\n            dispatch(tokenExpired());\r\n        }\r\n\r\n        if (error.message.includes(\"404\")) {\r\n            dispatch(noActivePlayer());\r\n        }\r\n\r\n        else {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n};\r\n\r\ninterface ILoadingStatusAction {\r\n    type: typeof types.LOADING_STATUS_CHANGE;\r\n    payload: {\r\n        songsLoadingStatus: types.loadingStatus,\r\n    };\r\n}\r\n\r\nexport const setStatus = (status: types.loadingStatus): ILoadingStatusAction => ({\r\n    type: types.LOADING_STATUS_CHANGE,\r\n    payload: {\r\n        songsLoadingStatus: status,\r\n    }\r\n});\r\n\r\ninterface IGetSongsAction {\r\n    type: typeof types.GET_SONGS;\r\n    payload: {\r\n        songs: types.Song[],\r\n    };\r\n}\r\n\r\nexport const getSongs = (songs: types.Song[]): IGetSongsAction => ({\r\n    type: types.GET_SONGS,\r\n    payload: {\r\n        songs,\r\n    }\r\n});\r\n\r\n//TODO is loading action\r\nexport const fetchSongs = (playMoodSong: () => Promise<void>) => async (\r\n    dispatch: Dispatch,\r\n): Promise<void> => {\r\n    try {\r\n\r\n        dispatch(setStatus(\"loading\"));\r\n\r\n        let len = await localforage.length();\r\n        console.log(len, \" localforage.length()\");\r\n\r\n        // let isSaved = await utils.songsSavedToIndexedDB\r\n\r\n        if (!len) {\r\n            let totalAmount = await utils.getSongsAmount();\r\n            let songsDetails: types.SongInformation[] = [];\r\n\r\n            let indexes = [...Array(Math.round(totalAmount / 50)).keys()];\r\n\r\n            if (totalAmount > maxSongs) {\r\n                // get random indexes in range of max amount\r\n                indexes = utils.shuffleArray(indexes).slice(0, Math.round(maxSongs / 50));\r\n            }\r\n\r\n            for (let i of indexes) {\r\n                const portion = await utils.fetchPortionSongDetails(i);\r\n                songsDetails = [...songsDetails, ...portion];\r\n            }\r\n\r\n            const ids = songsDetails.map(details => details.id);\r\n\r\n            let chunks: string[] = [];\r\n\r\n            //splice to chunk of 100\r\n            for (let i = 0; i < ids.length; i += 100) {\r\n                chunks.push(ids.slice(i, i + 100).join(','))\r\n            }\r\n\r\n            let songsMood: types.SongMood[] = [];\r\n\r\n            for (const chunk of chunks) {\r\n                const portion = await utils.fetchPortionSongMood(chunk);\r\n                songsMood = [...songsMood, ...portion];\r\n            }\r\n\r\n            const songs = <types.Song[]>songsDetails.map(itm => ({\r\n                ...songsMood.find((item) => (item.id === itm.id) && item),\r\n                ...itm\r\n            }));\r\n\r\n            await utils.saveSongsToIndexedDb(songs);\r\n        }\r\n\r\n        // dispatch(getSongs(songs));\r\n\r\n        dispatch(setStatus(\"loaded\"));\r\n\r\n        await playMoodSong();\r\n\r\n    } catch (error) {\r\n        dispatch(setStatus(\"waiting\"));\r\n\r\n        if (error.message.includes(\"401\") ||\r\n            (error.response && error.response.status === 401)) {\r\n            dispatch(tokenExpired());\r\n        }\r\n\r\n        else {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport type SpotifyActionsTypes =\r\n    ITokenExpirationAction |\r\n    IPlayerActive |\r\n    IGetSongsAction |\r\n    ILoadingStatusAction |\r\n    ISetActualPlayingSongAction;\r\n\r\n\r\n","export const TOKEN_EXPIRED = \"moodify/TOKEN_EXPIRED\";\r\nexport const TOKEN_REFRESHED = \"moodify/TOKEN_REFRESHED\";\r\nexport const IS_ACTIVE_PLAYER = \"moodify/IS_ACTIVE_PLAYER\";\r\nexport const NO_ACTIVE_PLAYER = \"moodify/NO_ACTIVE_PLAYER\";\r\nexport const GET_SONGS = \"moodify/GET_SONGS\";\r\nexport const LOADING_STATUS_CHANGE = \"moodify/LOADING_STATUS_CHANGE\";\r\nexport const SET_ACTUAL_SONG = \"moodify/SET_ACTUAL_SONG\";\r\n\r\nexport type SongInformation = {\r\n    id: string,\r\n    title: string,\r\n    artist: string,\r\n    albumCover: string,\r\n}\r\n\r\nexport type SongMood = {\r\n    id: string,\r\n    valence: number,\r\n    energy: number,\r\n    danceability: number,\r\n};\r\n\r\nexport type SongColor = {\r\n    colors: {\r\n        \"Vibrant\": Color,\r\n        \"LightVibrant\": Color,\r\n        \"DarkVibrant\": Color,\r\n        \"Muted\": Color,\r\n        \"LightMuted\": Color,\r\n        \"DarkMuted\": Color,\r\n    }\r\n};\r\n\r\nexport type Color = {\r\n    r: string,\r\n    g: string,\r\n    b: string,\r\n};\r\n\r\nexport type Song = SongInformation & SongMood;\r\n\r\nexport type loadingStatus = \"waiting\" | \"loading\" | \"loaded\";\r\n\r\nexport interface ISpotifyState {\r\n    readonly isTokenExpired: boolean,\r\n    readonly songsLoadingStatus: loadingStatus,\r\n    readonly songs: Song[],\r\n    readonly actualSong: Song & SongColor | null,\r\n    readonly isSpotifyPlayerActive: boolean,\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const RangeSlider = styled.input`\r\n    &[type=range] {\r\n        -webkit-appearance: none;\r\n        width: 100%;\r\n        margin: 5.6px 0;\r\n        background: transparent;\r\n      \r\n        &:focus {\r\n            outline: none;\r\n        }\r\n    }\r\n\r\n    &[type=range]::-webkit-slider-runnable-track {\r\n        width: 100%;\r\n        height: 4.8px;\r\n        cursor: pointer;\r\n        box-shadow: 0.5px 0.5px 2.6px rgba(0, 0, 0, 0.32), 0px 0px 0.5px rgba(13, 13, 13, 0.32);\r\n        background: rgba(255, 255, 255, 0.5);\r\n        border-radius: 2.1px;\r\n        border: 0px solid #180001;\r\n    }\r\n\r\n    &[type=range]::-webkit-slider-thumb {\r\n        box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);\r\n        border: 0.5px solid rgba(0, 0, 0, 0.13);\r\n        height: 12px;\r\n        width: 12px;\r\n        border-radius: 50px;\r\n        background: #ffffff;\r\n        cursor: pointer;\r\n        -webkit-appearance: none;\r\n        margin-top: -5.6px;\r\n    }\r\n\r\n    &[type=range]:focus::-webkit-slider-runnable-track {\r\n        background: rgba(255, 255, 255, 0.6);\r\n    }\r\n\r\n    &[type=range]::-moz-range-track {\r\n        width: 100%;\r\n        height: 4.8px;\r\n        cursor: pointer;\r\n        box-shadow: 0.5px 0.5px 2.6px rgba(0, 0, 0, 0.32), 0px 0px 0.5px rgba(13, 13, 13, 0.32);\r\n        background: rgba(255, 255, 255, 0.5);\r\n        border-radius: 2.1px;\r\n        border: 0px solid #180001;\r\n    }\r\n\r\n    &[type=range]::-moz-range-thumb {\r\n        box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);\r\n        border: 0.5px solid rgba(0, 0, 0, 0.13);\r\n        height: 12px;\r\n        width: 12px;\r\n        border-radius: 50px;\r\n        background: #ffffff;\r\n        cursor: pointer;\r\n    }\r\n\r\n    &[type=range]::-ms-track {\r\n        width: 100%;\r\n        height: 4.8px;\r\n        cursor: pointer;\r\n        background: transparent;\r\n        border-color: transparent;\r\n        color: transparent;\r\n    }\r\n\r\n    &[type=range]::-ms-fill-lower {\r\n        background: rgba(156, 156, 156, 0.5);\r\n        border: 0px solid #180001;\r\n        border-radius: 4.2px;\r\n        box-shadow: 0.5px 0.5px 2.6px rgba(0, 0, 0, 0.32), 0px 0px 0.5px rgba(13, 13, 13, 0.32);\r\n    }\r\n\r\n    &[type=range]::-ms-fill-upper {\r\n        background: rgba(255, 255, 255, 0.5);\r\n        border: 0px solid #180001;\r\n        border-radius: 4.2px;\r\n        box-shadow: 0.5px 0.5px 2.6px rgba(0, 0, 0, 0.32), 0px 0px 0.5px rgba(13, 13, 13, 0.32);\r\n    }\r\n\r\n    &[type=range]::-ms-thumb {\r\n        box-shadow: 0px 0px 0px rgba(0, 0, 0, 0), 0px 0px 0px rgba(13, 13, 13, 0);\r\n        border: 0.5px solid rgba(0, 0, 0, 0.13);\r\n        height: 12px;\r\n        width: 12px;\r\n        border-radius: 50px;\r\n        background: #ffffff;\r\n        cursor: pointer;\r\n        height: 4.8px;\r\n    }\r\n\r\n    &[type=range]:focus::-ms-fill-lower {\r\n        background: rgba(255, 255, 255, 0.5);\r\n    }\r\n\r\n    &[type=range]:focus::-ms-fill-upper {\r\n        background: rgba(255, 255, 255, 0.5);\r\n    }\r\n`;","import React, { useState } from \"react\";\r\nimport { RangeSlider } from \"./MoodSlider.styles\";\r\n\r\n\r\ntype Props = {\r\n    onReleased: (v: number) => void;\r\n};\r\n\r\nconst MoodSlider: React.FC<Props> = props => {\r\n\r\n    const { onReleased } = props;\r\n\r\n    const [value, setValue] = useState(\"500\");\r\n\r\n    const [previousValue, setPreviousValue] = useState(\"500\");\r\n\r\n    const gripReleased = () => {\r\n        if (previousValue !== value) {\r\n            let float = Number(value) * 0.001;\r\n            onReleased(float);\r\n        }\r\n        setPreviousValue(value);\r\n    };\r\n\r\n    return (\r\n        <RangeSlider\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"1000\"\r\n            value={value}\r\n            className=\"slider\"\r\n            onChange={(e) => setValue(e.target.value)}\r\n            onMouseUp={() => gripReleased()}\r\n            onMouseDown={() => setPreviousValue(value)}\r\n            onTouchEnd={() => gripReleased()}\r\n            onTouchStart={() => setPreviousValue(value)}\r\n        />\r\n\r\n    );\r\n};\r\n\r\nexport default MoodSlider;","import styled from 'styled-components'\r\n\r\nexport const AlbumCover = styled.img`\r\n    width: 100%;\r\n    height: auto;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    color: white;\r\n    opacity: 0.7;\r\n`;\r\n\r\nexport const Author = styled.h2`\r\n    font-size: 16px;\r\n    color: white;\r\n    opacity: 0.5;\r\n    margin-bottom: 30px;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { AlbumCover, Title, Author } from './style';\r\n\r\ntype Props = {\r\n    title: string,\r\n    artist: string,\r\n    albumCover: string,\r\n};\r\n\r\nconst Player: React.FC<Props> = props => {\r\n\r\n    const {\r\n        title,\r\n        artist,\r\n        albumCover,\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n            <AlbumCover src={albumCover} alt=\"Album cover\" />\r\n            <Title>{title}</Title>\r\n            <Author>{artist}</Author>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Player;","import styled, { keyframes } from 'styled-components'\r\n\r\nimport { Color } from './redux/spotify/types';\r\n\r\nconst gradient = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 0%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 100%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 0%;\r\n    }\r\n`;\r\n\r\ninterface IGradientBackground {\r\n    color1: Color,\r\n    color2: Color,\r\n}\r\n\r\nexport const Main = styled(\"main\") <IGradientBackground>`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    box-sizing: border-box;\r\n    padding: 0 70px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background: ${props => (props.color1 && props.color2 ?\r\n        `linear-gradient(115deg, \r\n                rgb(41,41,41),\r\n                rgb(${props.color2.r},${props.color2.g},${props.color2.b}),\r\n                rgb(${props.color1.r},${props.color1.g},${props.color1.b}),\r\n                rgb(${props.color2.r},${props.color2.g},${props.color2.b}),\r\n                rgb(41,41,41))`\r\n        : `linear-gradient(115deg, \r\n                black,\r\n                rgb(41,41,41),\r\n                #062F14,\r\n                rgb(41,41,41),\r\n                black)`)};\r\n\r\n\r\n\r\n\r\n    background-size: 500% 500%;\r\n    animation: ${gradient} 60s ease-in-out infinite;\r\n\r\n    @media (max-width: 740px) {\r\n        padding: 0 5vw;\r\n    }\r\n`;\r\n\r\nexport const Logo = styled(\"h1\") <IGradientBackground>`\r\n    align-self: flex-start;\r\n    font-size: 3.5rem;\r\n    font-weight: bold;\r\n    margin-bottom: 0px;\r\n    background: ${props => (props.color1 && props.color2 ?\r\n        `linear-gradient(45deg, \r\n                rgb(${props.color1.r},${props.color1.g},${props.color1.b}),\r\n                rgb(${props.color2.r},${props.color2.g},${props.color2.b}),\r\n                rgb(${props.color1.r},${props.color1.g},${props.color1.b}))`\r\n        : `linear-gradient(45deg, \r\n                #1DB954,\r\n                #0D5125,\r\n                #1DB954)`)};\r\n\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    background-size: 400% 400%;\r\n\r\n    animation: ${gradient} 15s ease infinite;\r\n\r\n    @media (max-width: 740px) {\r\n        font-size: 3.1rem;\r\n    }\r\n`;\r\n\r\nexport const SpotifyButton = styled.a`\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    background-color: #1DB954;\r\n    text-decoration: none;\r\n    color: white;\r\n    border-radius: 100px;\r\n    padding: 15px 30px;\r\n    margin: auto;\r\n`;\r\n\r\nexport const MoodLabel = styled.p`\r\n\tfont-size: 12px;\r\n\tcolor: white;\r\n\topacity: 0.5;\r\n\twidth: 500px;\r\n\tfont-weight: bold;\r\n\tpadding: 0;\r\n    margin: 10px 0 0 0; \r\n`;\r\n\r\ninterface IBlurrable {\r\n    blurred: boolean,\r\n}\r\n\r\nexport const PlayerMoodContainer = styled(\"div\") <IBlurrable>`\r\n    max-width: 500px;\r\n    width: 100%;\r\n    ${props => props.blurred ? \"filter: blur(10px)\" : \"\"};\r\n`;\r\n\r\nexport const LoadingSongs = styled.span`\r\n    font-size: 16px;\r\n\tcolor: white;\r\n\topacity: 0.6;\r\n    font-weight: bold;\r\n    display: block;\r\n    margin: auto 0;\r\n    padding: 50px 30px;\r\n    background-color: rgba(255,255,255,0.1);\r\n    border-radius: 10px;\r\n`;\r\n\r\n","import styled from 'styled-components'\r\n\r\nexport const WarningContainer = styled.div`\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: rgba(0,0,0,0.7);\r\n    z-index: 999;\r\n    color: white;\r\n    border-radius: 8px;\r\n    padding: 20px;\r\n    font-weight: normal;\r\n`;\r\n\r\nexport const WarningTitle = styled.h1`\r\n    font-size: 16px;\r\n    color: #1DB954;\r\n`;\r\n\r\nexport const WarningText = styled.p`\r\n    font-size: 14px;\r\n`;\r\n\r\nexport const WarningButton = styled.button`\r\n\tcolor: white;\r\n\tbackground-color: transparent;\r\n\tborder: 1px solid white;\r\n\tborder-radius: 5px;\r\n\ttext-transform: uppercase;\r\n\tfont-weight: bold;\r\n\tpadding: 7px 15px;\r\n\tmargin-left: auto;\r\n\tdisplay: block;\r\n\r\n    :hover{\r\n        background-color: rgba(255,255,255,0.2);\r\n    }\r\n    :active{\r\n        background-color: rgba(255,255,255,0.4);\r\n    }\r\n`;\r\n\r\n","import React from \"react\";\r\nimport {\r\n    WarningContainer,\r\n    WarningTitle,\r\n    WarningText,\r\n    WarningButton\r\n} from \"./styles\";\r\n\r\ntype Props = {\r\n    onClick: () => void;\r\n};\r\n\r\nconst NoActivePlayerWarning: React.FC<Props> = props => {\r\n\r\n    const { onClick } = props;\r\n\r\n    return (\r\n        <WarningContainer>\r\n            <WarningTitle>\r\n                Active player not found\r\n            </WarningTitle>\r\n            <WarningText>\r\n                Moodify can't find any active player. Try open spotify player and press \"Play\" button.\r\n            </WarningText>\r\n            <WarningButton onClick={onClick}>\r\n                Refresh\r\n            </WarningButton>\r\n        </WarningContainer>\r\n    );\r\n};\r\n\r\nexport default NoActivePlayerWarning;","import React, { useState, useEffect, Dispatch } from 'react';\r\nimport { useDispatch, connect } from 'react-redux'\r\nimport { getArgumentFromHash } from './utils';\r\n\r\nimport config from './config/config';\r\nimport './style.css';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { tokenRefreshed, fetchSongs, playMoodSong } from './redux/spotify/actions';\r\nimport {\r\n  setValency,\r\n  setEnergy,\r\n  setDanceability,\r\n} from './redux/mood/actions';\r\nimport { bindActionCreators } from 'redux';\r\nimport MoodSlider from './components/MoodSlider/MoodSlider';\r\nimport Player from './components/Player';\r\nimport { Main, Logo, SpotifyButton, MoodLabel, PlayerMoodContainer, LoadingSongs } from './App.style';\r\nimport NoActivePlayerWarning from './components/NoActivePlayerWarning';\r\n\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  isTokenExpired: state.spotify.isTokenExpired,\r\n  isSpotifyPlayerActive: state.spotify.isSpotifyPlayerActive,\r\n  actualSong: state.spotify.actualSong,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) =>\r\n  bindActionCreators(\r\n    {\r\n      tokenRefreshed: () => tokenRefreshed(),\r\n      setValency: (value) => setValency(value),\r\n      setEnergy: (value) => setEnergy(value),\r\n      setDanceability: (value) => setDanceability(value),\r\n      playMoodSong: () => playMoodSong(),\r\n      fetchSongs: (playMoodSong) => fetchSongs(playMoodSong),\r\n    },\r\n    dispatch\r\n  );\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> &\r\n  ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst App: React.FC<Props> = (props) => {\r\n\r\n  const {\r\n    isTokenExpired,\r\n    isSpotifyPlayerActive,\r\n    fetchSongs,\r\n    setValency,\r\n    setEnergy,\r\n    setDanceability,\r\n    playMoodSong,\r\n    actualSong,\r\n  } = props;\r\n\r\n  const [token, setToken] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"test\");\r\n\r\n    const localStoragedToken = localStorage.getItem(\"token\");\r\n    let _token: string = \"\";\r\n\r\n    // check if there is token already in localstorage\r\n    // and check if it isn't expired\r\n    // if no - try to achieve this from url\r\n    console.log(isTokenExpired, !localStoragedToken, localStoragedToken === \"undefined\");\r\n    if (isTokenExpired || !localStoragedToken) {\r\n      const hash: any = getArgumentFromHash();\r\n      window.location.hash = \"\";\r\n      localStorage.setItem('token', hash.access_token || \"\");\r\n    }\r\n    _token = localStorage.getItem(\"token\") || \"\";\r\n    console.log(_token);\r\n\r\n\r\n    // if token is available\r\n    if (_token) {\r\n      axios.defaults.headers.common = { 'Authorization': `Bearer ${_token}` };\r\n      fetchSongs(playMoodSong);\r\n    }\r\n\r\n    tokenRefreshed();\r\n    setToken(_token);\r\n\r\n  }, [isTokenExpired]);\r\n\r\n\r\n  const handleValencyChange = React.useCallback((value: number) => {\r\n\r\n    setValency(value);\r\n    playMoodSong();\r\n\r\n  }, [setValency, playMoodSong]);\r\n\r\n  const handleEnergyChange = React.useCallback((value: number) => {\r\n\r\n    setEnergy(value);\r\n    playMoodSong();\r\n\r\n  }, [setEnergy, playMoodSong]);\r\n\r\n  const handleDanceabilityChange = React.useCallback((value: number) => {\r\n\r\n    setDanceability(value);\r\n    playMoodSong();\r\n\r\n  }, [setDanceability, playMoodSong]);\r\n\r\n  return (\r\n    <Main\r\n      color1={actualSong && actualSong.colors.Muted}\r\n      color2={actualSong && actualSong.colors.DarkMuted}\r\n    >\r\n      <Logo\r\n        color1={actualSong && actualSong.colors.Vibrant}\r\n        color2={actualSong && actualSong.colors.DarkVibrant}\r\n      >\r\n        Moodify\r\n      </Logo>\r\n\r\n      {!isSpotifyPlayerActive && token &&\r\n        <NoActivePlayerWarning\r\n          onClick={() => playMoodSong()}\r\n        />\r\n      }\r\n\r\n      {token ?\r\n\r\n        (actualSong ?\r\n          <PlayerMoodContainer blurred={!isSpotifyPlayerActive as boolean}>\r\n            <Player\r\n              title={actualSong.title}\r\n              artist={actualSong.artist}\r\n              albumCover={actualSong.albumCover}\r\n            />\r\n            <MoodLabel> How happy are you? </MoodLabel>\r\n            <MoodSlider\r\n              onReleased={handleValencyChange} />\r\n            <MoodLabel> Are you full of energy? </MoodLabel>\r\n            <MoodSlider\r\n              onReleased={handleEnergyChange} />\r\n            <MoodLabel> How about dance? </MoodLabel>\r\n            <MoodSlider\r\n              onReleased={handleDanceabilityChange} />\r\n\r\n          </PlayerMoodContainer> :\r\n          <LoadingSongs>Loading songs from your Spotify...</LoadingSongs>\r\n        ) :\r\n\r\n        <SpotifyButton\r\n          className=\"btn btn--loginApp-link\"\r\n          href={`${config.authEndpoint}?client_id=${config.clientId}&redirect_uri=${config.redirectUri}&scope=${config.scopes.join(\r\n            \"%20\"\r\n          )}&response_type=token&show_dialog=true`}\r\n        >\r\n          Connect with Spotify\r\n        </SpotifyButton >\r\n      }\r\n\r\n    </Main>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import * as types from './types';\r\n\r\ninterface ISetValenceAction {\r\n    type: typeof types.SET_VALENCE;\r\n    payload: {\r\n        valence: number,\r\n    };\r\n}\r\n\r\nexport const setValency = (valence: number): ISetValenceAction => ({\r\n    type: types.SET_VALENCE,\r\n    payload: {\r\n        valence,\r\n    },\r\n});\r\n\r\ninterface ISetEnergyAction {\r\n    type: typeof types.SET_ENERGY;\r\n    payload: {\r\n        energy: number,\r\n    };\r\n}\r\n\r\nexport const setEnergy = (energy: number): ISetEnergyAction => ({\r\n    type: types.SET_ENERGY,\r\n    payload: {\r\n        energy,\r\n    },\r\n});\r\n\r\ninterface ISetDanceabilityAction {\r\n    type: typeof types.SET_DANCEABILITY;\r\n    payload: {\r\n        danceability: number,\r\n    };\r\n}\r\n\r\nexport const setDanceability = (danceability: number): ISetDanceabilityAction => ({\r\n    type: types.SET_DANCEABILITY,\r\n    payload: {\r\n        danceability,\r\n    },\r\n});\r\n\r\n\r\nexport type MoodActionsTypes =\r\n    ISetValenceAction |\r\n    ISetEnergyAction |\r\n    ISetDanceabilityAction;\r\n\r\n","export const SET_VALENCE = \"moodify/SET_VALENCE\";\r\nexport const SET_ENERGY = \"moodify/SET_ENERGY\";\r\nexport const SET_DANCEABILITY = \"moodify/SET_DANCEABILITY\";\r\n\r\nexport interface IMoodState {\r\n    readonly valence: number,\r\n    readonly energy: number,\r\n    readonly danceability: number,\r\n}\r\n\r\n\r\n","export const getArgumentFromHash = (): any => window.location.hash\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .reduce((initial: any, item: any) => {\r\n        if (item) {\r\n            let parts = item.split(\"=\");\r\n            initial[parts[0]] = decodeURIComponent(parts[1]);\r\n        }\r\n        return initial;\r\n    }, {});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport * as types from './types';\r\nimport { SpotifyActionsTypes } from './actions';\r\n\r\nconst initialState: types.ISpotifyState = {\r\n    isTokenExpired: false,\r\n    songsLoadingStatus: \"waiting\",\r\n    songs: [],\r\n    actualSong: null,\r\n    isSpotifyPlayerActive: true,\r\n};\r\n\r\nconst reducer = (\r\n    state = initialState,\r\n    action: SpotifyActionsTypes,\r\n): types.ISpotifyState => {\r\n\r\n    switch (action.type) {\r\n        case types.GET_SONGS:\r\n        case types.SET_ACTUAL_SONG:\r\n        case types.LOADING_STATUS_CHANGE:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case types.TOKEN_EXPIRED:\r\n            return {\r\n                ...state,\r\n                isTokenExpired: true,\r\n            }\r\n        case types.TOKEN_REFRESHED:\r\n            return {\r\n                ...state,\r\n                isTokenExpired: false,\r\n            }\r\n        case types.IS_ACTIVE_PLAYER:\r\n            return {\r\n                ...state,\r\n                isSpotifyPlayerActive: true,\r\n            }\r\n        case types.NO_ACTIVE_PLAYER:\r\n            return {\r\n                ...state,\r\n                isSpotifyPlayerActive: false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","\r\nimport * as types from './types';\r\nimport { MoodActionsTypes } from './actions';\r\n\r\nconst initialState: types.IMoodState = {\r\n    valence: 0.5,\r\n    energy: 0.5,\r\n    danceability: 0.5,\r\n};\r\n\r\nconst reducer = (\r\n    state = initialState,\r\n    action: MoodActionsTypes,\r\n): types.IMoodState => {\r\n\r\n    switch (action.type) {\r\n        case types.SET_VALENCE:\r\n        case types.SET_ENERGY:\r\n        case types.SET_DANCEABILITY:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\n\r\nimport spotifyReducer from './spotify/reducer';\r\nimport moodReducer from './mood/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    spotify: spotifyReducer,\r\n    mood: moodReducer,\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport thunk from 'redux-thunk';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './redux/rootReducer';\r\nimport { Provider, useSelector } from 'react-redux';\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\n\r\n\r\n// const store = createStore(rootReducer, applyMiddleware(thunk));\r\nconst store = createStore(rootReducer, (process.env.NODE_ENV !== \"production\") ?\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n  : applyMiddleware(thunk));\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}